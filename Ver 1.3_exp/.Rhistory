Qf = 1000*diag(2)
Q = array(0,c(2,2))
R = array(c(10,0,0,2), c(2,2))
init_plant(x0)
}
sys_init()
plant(c(4,1))
sys_x
unlockBinding("sys_x", globalenv())
nw = dim(Fn(sys_x,u))[2]
nv = dim(G(sys_x,u))[2]
nw
nv
sys_x = f(sys_x, u)*dt + Fn(sys_x, u)%*%rnorm(nw)
sys_x = f(sys_x, c(4,1))*dt + Fn(sys_x, c(4,1))%*%rnorm(nw)
sys_x
u = c(4,1)
y = g(sys_x, u) + G(sys_x, u)%*%rnorm(nv)
lockBinding("sys_x", globalenv())
y
plant = function(u){
## initialize state before running
## maintains states on its own
unlockBinding("sys_x", globalenv())
nw = dim(Fn(sys_x,u))[2]
nv = dim(G(sys_x,u))[2]
## updates
sys_x = f(sys_x, u)*dt + Fn(sys_x, u)%*%rnorm(nw)
y = g(sys_x, u) + G(sys_x, u)%*%rnorm(nv)
lockBinding("sys_x", globalenv())
y
}
rm("sys_x")
sys_x
init_plant(x0)
sys_x
plant(u)
sys_x
plant = function(u){
## initialize state before running
## maintains states on its own
unlockBinding("sys_x", globalenv())
nw = dim(Fn(sys_x,u))[2]
nv = dim(G(sys_x,u))[2]
## updates
sys_x <<- f(sys_x, u)*dt + Fn(sys_x, u)%*%rnorm(nw)
y = g(sys_x, u) + G(sys_x, u)%*%rnorm(nv)
lockBinding("sys_x", globalenv())
y
}
sys_x
plant(u)
sys_x
0.1*rnorm(100)
var(0.1*rnorm(100))
sd(0.1*rnorm(100))
plot(0.1*rnorm(100))
plot(0.1*rnorm(100))
plot(0.1*rnorm(100))
plot(0.1*rnorm(100))
plot(0.1*rnorm(100))
plot(0.01*rnorm(100))
######### system initialization ########
sys_init = function(){
nu = 2
ny = nx = 2
N = 100
dt = 0.1
x0 = c(2,2)
xf = c(0,0)
Qf = 1000*diag(2)
Q = array(0,c(2,2))
R = array(c(10,0,0,2), c(2,2))
init_plant(x0)
}
####### System Dynamics ######
f = function(x, u) {
## f defines the deterministic part of the system dynamics. ##
return(c(-x[2]*u[2], x[1]*u[2]-u[1]))
}
Fn = function(x,u){
## noise in state dynamics
## dim = nx X nw
C0 = 0.01*diag(nx)
C0
}
g = function(x, u) {
## g defines the deterministic part of the system observables. ##
H = diag(nx)
return(H%*%x)
}
G = function(x,u){
## noise in observation
D0 = 0.01*diag(ny)
D0
}
### Defining plant (actual world simulation) !!!
## gets control input and gives observation output and maintains state
init_plant = function(init_state){
sys_x <<- init_state
lockBinding("sys_x", globalenv())
}
plant = function(u){
## initialize state before running
## maintains states on its own
unlockBinding("sys_x", globalenv())
nw = dim(Fn(sys_x,u))[2]
nv = dim(G(sys_x,u))[2]
## updates
sys_x <<- f(sys_x, u)*dt + Fn(sys_x, u)%*%rnorm(nw)
y = g(sys_x, u) + G(sys_x, u)%*%rnorm(nv)
lockBinding("sys_x", globalenv())
y
}
####### Cost functions ########
l = function(x, u) {
## l defines the instantaneous costs prior to the final state. ##
(t(x)%*%Q%*%x) + (t(u)%*%R%*%u)
}
h = function(x) {
## h defines the system costs in the final state. ##
(t(x)%*%Qf%*%x)
}
compute_cost = function(x_,u_){
N = dim(x_)[2]
cost = h(x_[,N])
for(k in 1:(N-1)){
cost = cost + l(x_[,k],u_[,k])*dt
}
cost
}
control_cost = function(u_){
N = dim(u_)[2] + 1
cost = 0
for(k in 1:(N-1)){
cost = cost + (t(u_[,k]%*%R%*%u_[,k]))*dt
}
cost
}
state_cost = function(x_){
N = dim(x_)[2]
cost = h(x_[,N])
for(k in 1:(N-1)){
cost = cost + (t(x_[,k]%*%Q%*%x_[,k]))*dt
}
cost
}
###########################
### initial trajectory ######
init_trajectory = function(x0, N, mode = "control", rand =F){
if(mode == "lin_x"){
## initialize a trajectory
u_ = array(0,c(nu,N-1))
x_ = array(0,c(nx,N))
for(i in 1:nx){
x_[i,] = seq(x0[i],xf[i], length = N)
}
for(k in 1:(N-1)){
xdot = (x_[,k+1]-x_[,k])/dt
u_[,k] = root2(f,xdot,x0=c(1,1),eps = 1e-2, x=x_[,k])
}
}
if(mode == "control"){
## initialize a trajectory
if(rand){
temp = rnorm(nu*(N-1),sd=1)
} else{
temp = 0
}
u_ = array(temp,c(nu,N-1))
x_ = array(0,c(nx,N))
x_[,1] = x0
for(k in 1:(N-1)){
x_[,k+1] = x_[,k] + f(x_[,k], u_[,k])*dt
}
}
list(x_ = x_, u_ = u_)
}
#plant = function(x,u){
#   ## gives next output
#  x_new = x + f(x,u)*dt
# y_new = g(x,u)
#return list(x_new, y_new)
#}
stop_plant = function(){
unlockBinding("sys_x", globalenv())
}
stop_plant()
init_plant(x0)
plant(u)
sys_x
plant(u)
plant(u)
plant(u)
plant(u)
plant(u)
plant(u)
plant(u)
plant(u)
plant(u)
plant(u)
plant(u)
plant(u)
plant(u)
plant(u)
plant(u)
plant(u)
f(sys_x,u)
f(sys_x,u)*dt
plant = function(u){
## initialize state before running
## maintains states on its own
unlockBinding("sys_x", globalenv())
nw = dim(Fn(sys_x,u))[2]
nv = dim(G(sys_x,u))[2]
## updates
sys_x <<- sys_x + f(sys_x, u)*dt + Fn(sys_x, u)%*%rnorm(nw)
y = g(sys_x, u) + G(sys_x, u)%*%rnorm(nv)
lockBinding("sys_x", globalenv())
y
}
plant(c(0,0))
plant(c(0,0))
plant(c(0,0))
plant(c(0,0))
plant(c(0,0))
plant(c(0,0))
plant(c(0,0))
plant(c(0,0))
plant(u
)
)
plant(u)
plant(u)
plant(u)
plant(u)
plant(u)
plant(u)
plant(u)
plant(u)
plant(u)
plant(u)
stop_plant()
sys_init()
plant(c(1,0))
plant(c(1,0))
plant(c(1,0))
plant(c(1,0))
plant(c(1,0))
plant(c(1,0))
plant(c(1,0))
plant(c(1,0))
plant(c(1,0))
plant(c(1,0))
for(i in 1:100){ plant(c(1,0))}
stop_plant()
sys_init()
plot(sys_x)
plot(sys_x[1], sys_x[2])
plot(sys_x[1], sys_x[2], xlim = c(0,5), ylim = c(0,5)
)
)
plot(sys_x[1], sys_x[2], xlim = c(0,5), ylim = c(0,5))
for(i in 1:20){ plant(c(1,0)); plot(sys_x[1], sys_x[2], xlim = c(0,5), ylim = c(0,5)); par(new= T)}
for(i in 1:20){ plant(c(1,0)); plot(sys_x[1], sys_x[2], xlim = c(0,3), ylim = c(-10,3)); par(new= T)}
stop_plant()
sys_init()
for(i in 1:100){ plant(c(1,0)); plot(sys_x[1], sys_x[2], xlim = c(0,3), ylim = c(-10,3)); par(new= T)}
stop_plant()
sys_init()
for(i in 1:100){ plant(c(1,0)); plot(sys_x[1], sys_x[2], xlim = c(0,3), ylim = c(-10,3)); par(new= T)}
stop_plant()
plant = function(u){
## initialize state before running
## maintains states on its own
unlockBinding("sys_x", globalenv())
nw = dim(Fn(sys_x,u))[2]
nv = dim(G(sys_x,u))[2]
## updates
sys_x <<- sys_x + f(sys_x, u)*dt + 0*Fn(sys_x, u)%*%rnorm(nw)
y = g(sys_x, u) + G(sys_x, u)%*%rnorm(nv)
lockBinding("sys_x", globalenv())
y
}
sys_init()
for(i in 1:100){ plant(c(1,0)); plot(sys_x[1], sys_x[2], xlim = c(0,3), ylim = c(-10,3)); par(new= T)}
stop_plant()
sys_init()
for(i in 1:100){ plant(c(1,0)); plot(sys_x[1], sys_x[2], xlim = c(0,3), ylim = c(-10,3)); par(new= T)}
nx <<- nu <<- 2
nx
nu
nx <<- nu <<- 3
nx
nu
setwd("Documents/Acads/FireflyProject-master/Rcodes/Ver 1.3_exp")
source("ilqg.R")
h = function(x) {
## h defines the system costs in the final state. ##
-10*exp(-sqrt(t(x-xf)%*%Qf%*%(x-xf)))
}
source("ilqg.R")
x0 = c(0,0,pi/2)
xf = c(3,2,0)
Qf = 1*diag(3)
Qf[3,3] = 0
Q = array(0,c(3,3))
R = array(c(10,0,0,2), c(2,2))
x0
xf
xf = c(2,2,0)
xf
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = F)
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
exp(-3)
exp(-3/2)
h = function(x) {
## h defines the system costs in the final state. ##
-10*exp(-sqrt(t(x-xf)%*%Qf%*%(x-xf))/2)
}
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = F)
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
h = function(x) {
## h defines the system costs in the final state. ##
-1000*exp(-sqrt(t(x-xf)%*%Qf%*%(x-xf))/2)
}
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = F)
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = T)
h = function(x) {
## h defines the system costs in the final state. ##
-10*exp(-sqrt(t(x-xf)%*%Qf%*%(x-xf))/2)
}
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = T)
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
h = function(x) {
## h defines the system costs in the final state. ##
-10*exp(-sqrt(t(x-xf)%*%Qf%*%(x-xf))/10)
}
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = T)
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
xf
R = R*0.01
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = T)
h = function(x) {
## h defines the system costs in the final state. ##
-10*exp(-t(x-xf)%*%Qf%*%(x-xf)/2)
}
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = T)
R
source("ilqg.R")
Qf = 1*diag(3)
Qf[3,3] = 0
xf = c(2,2,0)
R = array(c(10,0,0,2), c(2,2))
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = T)
source("ilqg.R")
x0 = c(0,0,pi/2)
xf = c(2,2,0)
Qf = 1*diag(3)
Qf[3,3] = 0
Q = array(0,c(3,3))
R = array(c(10,0,0,2), c(2,2))
R= 0.01*R
R
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = T)
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = T)
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
R = 1e-3 *R
R
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = T)
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = T)
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = T)
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
h = function(x) {
## h defines the system costs in the final state. ##
10-10*exp(-t(x-xf)%*%Qf%*%(x-xf)/2)
}
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = T)
Qf = 1e-6 *Q
Qf = 1000*diag(3)
Qf[3,3] = 0
Qf = 1e-6 *Qf
Qf
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = T)
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
xf
xf = c(2,2,0)
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = T)
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
R
R = R*10
R
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = T)
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
R= 1e-3 * R
R
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = T)
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
R = 10*R
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = T)
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
xf
xf = xf+1
xf
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = T)
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
h = function(x) {
## h defines the system costs in the final state. ##
-10*exp(-sqrt(t(x-xf)%*%Qf%*%(x-xf))/2)
}
xf
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = T)
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = T)
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = F)
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
Qf
Qf = 100*Qf
Qf
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = F)
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
xf
R
R= 10
8
R = array(c(10,0,0,2), c(2,2))
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = F)
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
Qf
Qf =Qf/10
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = F)
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
Qf =Qf*50
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = F)
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
h = function(x) {
## h defines the system costs in the final state. ##
t(x-xf)%*%Qf%*%(x-xf)
}
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = F)
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
Qf = 1000*diag(3)
Qf[3,3] = 0
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = F)
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = F)
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
h = function(x) {
## h defines the system costs in the final state. ##
t(x-xf)%*%Qf%*%(x-xf) + t(x-c(2,1))%*%Qf%*%(x-c(2,1))
}
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = F)
warnings()
h = function(x) {
## h defines the system costs in the final state. ##
t(x-xf)%*%Qf%*%(x-xf) + t(x-c(2,1,0))%*%Qf%*%(x-c(2,1,0))
}
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = F)
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
h = function(x) {
## h defines the system costs in the final state. ##
t(x-xf)%*%Qf%*%(x-xf) + t(x-c(-2,1,0))%*%Qf%*%(x-c(-2,1,0))
}
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = F)
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = F)
h = function(x) {
## h defines the system costs in the final state. ##
t(x-xf)%*%Qf%*%(x-xf)
}
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = F)
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = F)
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
x = -10:10
y = abs(x) + abs(x-2)
plot(x,y, type='l')
h = function(x) {
## h defines the system costs in the final state. ##
min(t(x-xf)%*%Qf%*%(x-xf), t(x-xf2)%*%Qf%*%(x-xf2))
}
xf
xf = c(2,2,0)
xf2 = c(1,2,0)
nu = 2
nx = 3
ny = 3
N = 100
dt = 0.1
x0 = c(0,0,pi/2)
xf = c(2,2,0)
Qf = 1000*diag(3)
Qf[3,3] = 0
Q = array(0,c(3,3))
R = array(c(10,0,0,2), c(2,2))
xf2
dt = 0.1
N = 100
h
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = F)
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
xf2 = c(0,0,0)
x0
res$x
res$x[,100]
x0 = res$x[,100]
x0
xf
xf2
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = F)
vec_plot(res,xlim = c(-1,3), ylim = c(-1,3))
