source("gen_iLQG.R")
f = function(x, u) {
## f defines the deterministic part of the system dynamics. ##
return(c(-x[2]*u[2], x[1]*u[2]-u[1]))
}
f = function(x, u) {
## f defines the deterministic part of the system dynamics. ##
return(c(-x[2]*u[2], x[1]*u[2]-u[1]))
}
library(pracma)
root = function(f,y,range,...){
# f(x) - y = 0
val =0; nr = 0; x0 =0
x = seq(range[1], range[2], by=diff(range)/100)
p_val = f(x[1],...)-y
for(i in 1:length(x)){
val[i] = f(x[i],...)-y
if((val[i]>=0 & p_val <0) | (val[i]<=0 & p_val >0)){
nr = nr + 1
x0[nr] = x[i]
}
p_val = val[i]
}
roots = 0
for(i in 1:nr){
xi = x0[i]
converged = F
while(!converged){
f1 = jacobian(f,x0=xi,...)
x1 = xi - (f(xi,...)-y)/f1
xi = x1
if(abs(f(xi,...)-y) < 10e-12){
converged = T
}
}
roots[i] = xi
}
roots
}
x0
x0  = c(2,2)
x1 = c(1.5,1.5)
dt = 1
root(f,c(-0.5,-0.5), range=c(-100,100), x = x0)
root2 = function(f,y x0,...){
converged = F
while(!converged){
f1 = jacobian(f,x0=x0,...)
x1 = x0 - (f(x0,...)-y)/f1
x0 = x1
if(abs(f(x0,...)-y) < 10e-12){
converged = T
}
}
x0
}
root2 = function(f,y, x0,...){
converged = F
while(!converged){
f1 = jacobian(f,x0=x0,...)
x1 = x0 - (f(x0,...)-y)/f1
x0 = x1
if(abs(f(x0,...)-y) < 10e-12){
converged = T
}
}
x0
}
root2(f,c(-0.5,-0.5),c(2,2), x=x0)
root2 = function(f,y, x0,...){
converged = F
while(!converged){
f1 = jacobian(f,x0=x0,...)
x1 = x0 - (f(...,x0)-y)/f1
x0 = x1
if(abs(f(...,x0)-y) < 10e-12){
converged = T
}
}
x0
}
root2(f,c(-0.5,-0.5),c(2,2), x=x0)
f
g = function(x,...){ f(x,...)}
g(c(2,2),u =c(0,0))
g = function(u,...){ f(...,u)}
g(c(2,2),x =c(0,0))
g = function(x,...){ f(...,x)}
g(c(2,2),x =c(0,0))
g(c(2,2),c(0,0))
f(c(2,2), c(0,0))
f(c(0,0), c(2,2))
g = function(x,...){ f(x,...)}
g(c(2,2), c(0,0))
g(c(0,0), c(2,2))
g = function(a,...){ f(a,...)}
g(c(2,2), c(0,0))
g = function(a,...){ f(...,a)}
g(c(2,2), c(0,0))
g = function(x,...){ f(...,x)}
g(c(2,2), c(0,0))
g = function(a,...){ f(...,a)}
g(c(2,2), u=c(0,0))
g(c(2,2), x=c(0,0))
root2 = function(f,y, x0,...){
converged = F
while(!converged){
f1 = jacobian(f,x0=x0,...)
x1 = x0 - (f(...,x0)-y)/f1
x0 = x1
if(abs(f(...,x0)-y) < 10e-12){
converged = T
}
}
x0
}
root2(f,0,x0=c(1,1),x=c(2,2))
root2(f,c(0,0),x0=c(1,1),x=c(2,2))
c(1,1)/c(2,2)
root2 = function(f,y, x0,...){
converged = F
while(!converged){
f1 = jacobian(f,x0=x0,...)
x1 = x0 - (f(...,x0)-y)/f1
x0 = x1
if(abs(f(...,x0)-y) < 1e-12){
converged = T
}
}
x0
}
root2(f,c(0,0),x0=c(1,1),x=c(2,2))
f(x=c(2,2),c(1,1)) - c(0,0)
root2 = function(f,y, x0,...){
converged = F
while(!converged){
f1 = jacobian(f,x0=x0,...)
print(f1)
x1 = x0 - (f(...,x0)-y)/f1
x0 = x1
if(abs(f(...,x0)-y) < 1e-12){
converged = T
}
}
x0
}
f(x=c(2,2),c(1,1)) - c(0,0)
root2(f,c(0,0),x0=c(1,1),x=c(2,2))
f
library(pracma)
root2 = function(f,y, x0,...){
converged = F
while(!converged){
f1 = jacobian(f,x0=x0,...)
print(f1)
x1 = x0 - ginv(f1)%*%(f(...,x0)-y)
x0 = x1
if(abs(f(...,x0)-y) < 1e-12){
converged = T
}
}
x0
}
root2(f,c(0,0),x0=c(1,1),x=c(2,2))
library(MASS)
ginv
root2(f,c(0,0),x0=c(1,1),x=c(2,2))
root2(f,c(0,0),x0=c(1,1),x=c(2,2))
root2 = function(f,y, x0,...){
converged = F
while(!converged){
f1 = jacobian(f,x0=x0,...)
print(f1)
x1 = x0 - ginv(f1)%*%(f(...,x0)-y)
x0 = x1
if(sum(abs(f(...,x0)-y)) < 1e-12){
converged = T
}
}
x0
}
root2(f,c(0,0),x0=c(1,1),x=c(2,2))
root2 = function(f,y, x0,...){
converged = F
while(!converged){
f1 = jacobian(f,x0=x0,...)
#print(f1)
x1 = x0 - ginv(f1)%*%(f(...,x0)-y)
x0 = x1
if(sum(abs(f(...,x0)-y)) < 1e-12){
converged = T
}
}
x0
}
root2 = function(f,y, x0,...){
converged = F
while(!converged){
f1 = jacobian(f,x0=x0,...)
#print(f1)
x1 = x0 - ginv(f1)%*%(f(...,x0)-y)
x0 = x1
if(sum(abs(f(...,x0)-y)) < 1e-12){
converged = T
}
}
x0
}
root2(f,c(-0.5,-0.5),x0=c(1,1),x=c(2,2))
f(c(2,2),c(1,0.25))
root = function(f,y, x0,...){
converged = F
while(!converged){
f1 = jacobian(f,x0=x0,...)
#print(f1)
x1 = x0 - ginv(f1)%*%(f(...,x0)-y)
x0 = x1
if(sum(abs(f(...,x0)-y)) < 1e-12){
converged = T
}
}
x0
}
nu = 2
nx = 2
N = 10
u_ = array(0,c(nu,N-1))
X_ = array(0,c(nx,N))
x_[,1] = x0 ## initial point
for(k in 1:(N-1)){
x_[,(k+1)] = x_[,k] + f(x_[,k],u_[,k],)
}
## initialize a trajectory
u_ = array(0,c(nu,N-1))
x_ = array(0,c(nx,N))
x_[,1] = x0 ## initial point
for(k in 1:(N-1)){
x_[,(k+1)] = x_[,k] + f(x_[,k],u_[,k],)
}
## initialize a trajectory
u_ = array(0,c(nu,N-1))
x_ = array(0,c(nx,N))
x_[,1] = x0 ## initial point
for(k in 1:(N-1)){
x_[,(k+1)] = x_[,k] + f(x_[,k],u_[,k])
}
x_
## initialize a trajectory
u_ = array(0,c(nu,N-1))
x_ = array(0,c(nx,N))
x_[,1] = x0 ## initial point
for(k in 1:(N-1)){
x_[,(k+1)] = x_[,k] + f(x_[,k],u_[,k],)*dt
}
## Iterative lqg
## initialize a trajectory
u_ = array(0,c(nu,N-1))
x_ = array(0,c(nx,N))
x_[,1] = x0 ## initial point
for(k in 1:(N-1)){
x_[,(k+1)] = x_[,k] + f(x_[,k],u_[,k])*dt
}
x_
## Iterative lqg
## initialize a trajectory
u_ = array(1,c(nu,N-1))
x_ = array(0,c(nx,N))
x_[,1] = x0 ## initial point
for(k in 1:(N-1)){
x_[,(k+1)] = x_[,k] + f(x_[,k],u_[,k])*dt
}
x_
plot(t(x_))
plot(t(x_), type='l')
N
N =100
## Iterative lqg
## initialize a trajectory
u_ = array(1,c(nu,N-1))
x_ = array(0,c(nx,N))
x_[,1] = x0 ## initial point
for(k in 1:(N-1)){
x_[,(k+1)] = x_[,k] + f(x_[,k],u_[,k])*dt
}
plot(t(x_), type='l')
x_
## Iterative lqg
## initialize a trajectory
u_ = array(-1,c(nu,N-1))
x_ = array(0,c(nx,N))
x_[,1] = x0 ## initial point
for(k in 1:(N-1)){
x_[,(k+1)] = x_[,k] + f(x_[,k],u_[,k])*dt
}
plot(t(x_), type='l')
x_
N
u_ = cbind(exp(-1*1:100), exp(-1*1:100))
u_
## Iterative lqg
## initialize a trajectory
x_ = array(0,c(nx,N))
x_[,1] = x0 ## initial point
for(k in 1:(N-1)){
x_[,(k+1)] = x_[,k] + f(x_[,k],u_[,k])*dt
}
u_ = cbind(exp(-1*1:99), exp(-1*1:99))
## Iterative lqg
## initialize a trajectory
x_ = array(0,c(nx,N))
x_[,1] = x0 ## initial point
for(k in 1:(N-1)){
x_[,(k+1)] = x_[,k] + f(x_[,k],u_[,k])*dt
}
N
dim(u_)
u_ =t(u_)
dim(u_)
## Iterative lqg
## initialize a trajectory
x_ = array(0,c(nx,N))
x_[,1] = x0 ## initial point
for(k in 1:(N-1)){
x_[,(k+1)] = x_[,k] + f(x_[,k],u_[,k])*dt
}
x_
plot(t(x_), type='l')
u_
u_[1,] = -u_[1,]
u_
## Iterative lqg
## initialize a trajectory
x_ = array(0,c(nx,N))
x_[,1] = x0 ## initial point
for(k in 1:(N-1)){
x_[,(k+1)] = x_[,k] + f(x_[,k],u_[,k])*dt
}
plot(t(x_), type='l')
f
x0
u_[1,] = -3*u_[1,]
## Iterative lqg
## initialize a trajectory
x_ = array(0,c(nx,N))
x_[,1] = x0 ## initial point
for(k in 1:(N-1)){
x_[,(k+1)] = x_[,k] + f(x_[,k],u_[,k])*dt
}
plot(t(x_), type='l')
u_ = rbind(exp(-0.5*1:99), 2*exp(0.5*1:99))
## Iterative lqg
## initialize a trajectory
x_ = array(0,c(nx,N))
x_[,1] = x0 ## initial point
for(k in 1:(N-1)){
x_[,(k+1)] = x_[,k] + f(x_[,k],u_[,k])*dt
}
plot(t(x_), type='l')
u_
u_ = rbind(exp(-0.5*1:99), 2*exp(-0.5*1:99))
## Iterative lqg
## initialize a trajectory
x_ = array(0,c(nx,N))
x_[,1] = x0 ## initial point
for(k in 1:(N-1)){
x_[,(k+1)] = x_[,k] + f(x_[,k],u_[,k])*dt
}
plot(t(x_), type='l')
u_ = rbind(exp(-0.5*1:99), 3*exp(-0.5*1:99))
## Iterative lqg
## initialize a trajectory
x_ = array(0,c(nx,N))
x_[,1] = x0 ## initial point
for(k in 1:(N-1)){
x_[,(k+1)] = x_[,k] + f(x_[,k],u_[,k])*dt
}
plot(t(x_), type='l')
u_ = rbind(exp(-0.5*1:99), 3*exp(-1*1:99))
## Iterative lqg
## initialize a trajectory
x_ = array(0,c(nx,N))
x_[,1] = x0 ## initial point
for(k in 1:(N-1)){
x_[,(k+1)] = x_[,k] + f(x_[,k],u_[,k])*dt
}
plot(t(x_), type='l')
nx
xf = c(0,0)
N
N = 10
x_[1,] = seq(x0[1],xf[1], length = N)
x_[2,] = seq(x0[2],xf[2], length = N)
x_
N
x_ = array(0,c(nx,N))
#x_[,1] = x0 ## initial point
x_[1,] = seq(x0[1],xf[1], length = N)
x_[2,] = seq(x0[2],xf[2], length = N)
x_
root2
u_ = array(0,c(nu,N-1))
x_ = array(0,c(nx,N))
#x_[,1] = x0 ## initial point
x_[1,] = seq(x0[1],xf[1], length = N)
x_[2,] = seq(x0[2],xf[2], length = N)
for(k in 1:(N-1)){
xdot = (x[,k+1]-x[,k])/dt
u[,k] = root2(f,xdot,x0=c(10,10), x=x[,k])
#x_[,(k+1)] = x_[,k] + f(x_[,k],u_[,k])*dt
}
for(k in 1:(N-1)){
xdot = (x_[,k+1]-x_[,k])/dt
u[,k] = root2(f,xdot,x0=c(10,10), x=x[,k])
#x_[,(k+1)] = x_[,k] + f(x_[,k],u_[,k])*dt
}
root2(f,c(-0.5,-0.5),x0=c(1,1),x=c(2,2))
k=
1
xdot = (x_[,k+1]-x_[,k])/dt
xdot
root2(f,xdot,x0=c(1,1),x=c(2,2))
x_[,1]
u
u_
for(k in 1:(N-1)){
xdot = (x_[,k+1]-x_[,k])/dt
u[,k] = root2(f,xdot,x0=c(1,1), x=x_[,k])
#x_[,(k+1)] = x_[,k] + f(x_[,k],u_[,k])*dt
}
for(k in 1:(N-1)){
xdot = (x_[,k+1]-x_[,k])/dt
u_[,k] = root2(f,xdot,x0=c(1,1), x=x_[,k])
#x_[,(k+1)] = x_[,k] + f(x_[,k],u_[,k])*dt
}
u_
x_ = array(0,c(nx,N))
for(k in 1:(N-1)){
#xdot = (x_[,k+1]-x_[,k])/dt
#u_[,k] = root2(f,xdot,x0=c(1,1), x=x_[,k])
x_[,(k+1)] = x_[,k] + f(x_[,k],u_[,k])*dt
}
x_
x0
x_ = array(0,c(nx,N))
x_[,1] = x0
x_
for(k in 1:(N-1)){
#xdot = (x_[,k+1]-x_[,k])/dt
#u_[,k] = root2(f,xdot,x0=c(1,1), x=x_[,k])
x_[,(k+1)] = x_[,k] + f(x_[,k],u_[,k])*dt
}
x_
plot(x_)
plot(t(x_))
source("newton.R")
setwd("Documents/Acads/FireflyProject-master/R codes/New/")
source("newton.R")
source("kalman_lqg.R")
source("sys_dynamics.R")
source("linearize.R")
u_ = array(0,c(nu,N-1))
x_ = array(0,c(nx,N))
for(i in 1:nx){
x_[i,] = seq(x0[i],xf[i], length = N)
}
for(k in 1:(N-1)){
xdot = (x_[,k+1]-x_[,k])/dt
u_[,k] = root2(f,xdot,x0=c(1,1), x=x_[,k])
## can possibly fail, it takes inverse to find u_
## might need something else
}
dt = 1
for(k in 1:(N-1)){
xdot = (x_[,k+1]-x_[,k])/dt
u_[,k] = root2(f,xdot,x0=c(1,1), x=x_[,k])
## can possibly fail, it takes inverse to find u_
## might need something else
}
prev_cost = compute_cost(x_,u_,h,l)  ## initial cost
compute_cost = function(x_,u_,h,l){
cost = h(x_[,N])
for(k in 1:(N-1)){
cost = cost + l(x_[,k],u_[,k])*dt
}
cost
}
prev_cost = compute_cost(x_,u_,h,l)  ## initial cost
nu = 2
nx = 2
N = 10
ny = 10
x0 = c(2,2)
xf = c(0,0)
Q = diag(2)
R = array(c(10,0,0,2), c(2,2))
prev_cost = compute_cost(x_,u_,h,l)  ## initial cost
sys = linearize(x_,u_,f,g,h,l)  # linearize around initial nominal trajectory
h = function(x) {
## h defines the system costs in the final state. ##
(t(x)%*%Q%*%x)
}
sys = linearize(x_,u_,f,g,h,l)  # linearize around initial nominal trajectory
h
source("linearize.R")
sys = linearize(x_,u_,f,g,h,l)  # linearize around initial nominal trajectory
source("linearize.R")
sys = linearize(x_,u_,f,g,h,l)  # linearize around initial nominal trajectory
