R
v
v = temp$values
v
v = v + min(v)
(temp$vectors) %*% diag(v) %*% solve(temp$vectors)
R
v
v = temp$values
v1 = v
v1[2] = 0
v2 = v - min(v)
v2
v1
v
(temp$vectors) %*% diag(v) %*% solve(temp$vectors)
(temp$vectors) %*% diag(v1) %*% solve(temp$vectors)
(temp$vectors) %*% diag(v2) %*% solve(temp$vectors)
R2 = (temp$vectors) %*% diag(v2) %*% solve(temp$vectors)
R1 = (temp$vectors) %*% diag(v1) %*% solve(temp$vectors)
R
R1
R2
det(R-R1)
det(R-R2)
R-R1
sum((R-R1)^2)
sum((R-R2)^2)
R1
x
x = 1:100
x = -100:100
y = x^2/(1+x^2)
plot(x,y, type='l')
x = (-100:100)/100
x
y = x^2/(1+x^2)
plot(x,y, type='l')
x = (-1000:1000)/100
x
x
max(x)
y = x^2/(1+x^2)
plot(x,y, type='l')
y = x^2/(0.1+x^2)
par(new=T)
plot(x,y, type='l', col2=)
plot(x,y, type='l', col=2)
y = x^2/(1+x^2)
plot(x,y, col = 1, type='l', ylim = c(0,1), xlim = c(-1,1))
plot(x,y, col = 1, type='l', ylim = c(0,1), xlim = c(-10,10))
par(new=T)
y = x^2/(0.1+x^2)
plot(x,y, col = 2, type='l', ylim = c(0,1), xlim = c(-10,10))
par(new=T)
y = x^2/(10+x^2)
plot(x,y, col = 3, type='l', ylim = c(0,1), xlim = c(-10,10))
y = 0.1*x^2/(1+x^2)
par(new=T)
plot(x,y, col = 4, type='l', ylim = c(0,1), xlim = c(-10,10))
y = 0.1*x^2/(1+0.1*x^2)
par(new=T)
plot(x,y, col = 4, type='l', ylim = c(0,1), xlim = c(-10,10))
grad(x)
jacobian()
library(pracma)
f = function(x)P
f = function(x){}
f = function(x){ x^2/(10+x^2)}
y = f(x)
y
plot(x,y, col = 2, type='l', ylim = c(0,1), xlim = c(-10,10))
grid()
y1 = jacobian(f,x)
y1
dim(y1)
diag(y1)
y12 = diag(y1)
par(new=T)
plot(x,y1, type='l')
plot(x,y12, type='l')
plot(x,y12, type='l')
grid()
length(x)
y2= 0
hessian(f,2)
for(i in 1:length(x)){ y2[i] = hessian(f,x[i])}
y1 = 0
for(i in 1:length(x)){ y1[i] = jacobian(f,x[i])}
plot(x,y1, type='l')
grid()
plot(x,y2, type='l')
plot(x,y, type='l')
plot(x,y2, type='l')
plot(x,y, type='l')
f(x)
f
f1 = function(x){ (x-2)^2/(10+(x-2)^2)}
plot(x,y = f1(x)+f(x), type='l')
y
f(0)
f1(0)
y = f(x) + f1(x)
y[1000]
y[1001]
plot(x,y, type='l')
f1 = function(x){ (x-8)^2/(10+(x-8)^2)}
y = f(x) + f1(x)
plot(x,y, type='l')
f1 = function(x){ (x-3)^2/(10+(x-3)^2)}
y = f(x) + f1(x)
plot(x,y, type='l')
min(y)
f1 = function(x){ (x-4)^2/(10+(x-4)^2)}
y = f(x) + f1(x)
plot(x,y, type='l')
f1 = function(x){ (x-4)^2/(2+(x-4)^2)}
f
f = function(x){ x^2/(2+x^2)}
y = f(x) + f1(x)
plot(x,y, type='l')
f1 = function(x){ (x-2)^2/(2+(x-2)^2)}
y = f(x) + f1(x)
plot(x,y, type='l')
fsum = function(x){ (x-2)^2/(2+(x-2)^2) + (x)^2/(2+(x)^2)}
plot(x, fsum(x))
plot(x, fsum(x), type='l')
y1=y2 = 0
for(i in 1:length(x)){ y1[i] = jacobian(fsum, x[i]); y2[i] = hessian(fsum,x[i])}
par(new=T)
plot(x, y1,, col=2 type='l')
plot(x, y1,, col=2, type='l')
plot(x, y1,, col=2, type='l')
plot(x, y2,, col=2, type='l')
getwd()
getwd("..")
getwd("\..")
setwd("..")
setwd("Ver 1.3_exp/")
source("ilqg.R")
x0
xf
setwd("..")
setwd("Ver 1.2")
source("ilqg.R")
x
y
y = f(x)
f
f1
y = f1(x)
plot(x,y, type='l')
plot(x,x^2/(1+x^2), type='l')
plot(x,x^2/(10+x^2), type='l')
plot(x,x^2/(0.1+x^2), type='l')
plot(x,-x^2/(0.1+x^2), type='l')
plot(x,1-x^2/(0.1+x^2), type='l')
plot(x,-1+x^2/(0.1+x^2), type='l')
h = function(x) {
## h defines the system costs in the final state. ##
#(t(x)%*%Qf%*%x)
-1 + (t(x)%*%Qf%*%x)/(1+(t(x)%*%Qf%*%x))
}
Qf = diag(nx)
Qf
x0
dt
N
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = F)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
res
res$x
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
res$x
t)res$x)
t(res$x)
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "lin_x", rand = T)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
h(res$x[,99])
h(res$x[,100])
h(c(1,1))
h(c(0,0))
h = function(x) {
## h defines the system costs in the final state. ##
#(t(x)%*%Qf%*%x)
(t(x)%*%Qf%*%x)/(1+(t(x)%*%Qf%*%x))
}
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "lin_x", rand = T)
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = F)
h(res$x[,100])
res$x[,100]
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
h = function(x) {
## h defines the system costs in the final state. ##
#(t(x)%*%Qf%*%x)
100*(t(x)%*%Qf%*%x)/(1+(t(x)%*%Qf%*%x))
}
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = F)
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = T)
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = T)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = T)
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = T)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
init_trajectory = function(x0, N, mode = "control", rand =F){
if(mode == "lin_x"){
## initialize a trajectory
u_ = array(0,c(nu,N-1))
x_ = array(0,c(nx,N))
for(i in 1:nx){
x_[i,] = seq(x0[i],xf[i], length = N)
}
for(k in 1:(N-1)){
xdot = (x_[,k+1]-x_[,k])/dt
u_[,k] = root2(f,xdot,x0=rep(1,nx), x=x_[,k])
}
}
if(mode == "control"){
## initialize a trajectory
if(rand){
temp = rnorm(nu*(N-1),sd=1)
} else{
temp = 0.01
}
u_ = array(temp,c(nu,N-1))
x_ = array(0,c(nx,N))
x_[,1] = x0
for(k in 1:(N-1)){
x_[,k+1] = x_[,k] + f(x_[,k], u_[,k])*dt
}
}
list(x_ = x_, u_ = u_)
}
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = F)
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "control", rand = T)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
gen_trajectory = function(x0, N,...){
soln = init_trajectory(x0,N)
init_x = x = x_ = soln$x_ ;  init_u = u = u_ = soln$u_
prev_cost = init_cost = compute_cost(x_,u_)
print(paste("initial cost = ", init_cost))
iter = 1
for(n in N:2){
soln = ilqg(x0, n, ...) # maxIter = 50, eps=1e-3, logg =T)
x_[,(N-n+1):N] = soln$x
u_[,(N-n+1):(N-1)] = soln$u
cost = compute_cost(x_,u_)
if(cost < prev_cost){
## take steps
## update actual trajectory
x = x_
u = u_
}
cost = compute_cost(x,u)
print(paste("time_step", iter, ": cost =",cost))
prev_cost = cost
x0 = x[,(N-n+2)]
iter = iter+1
}
#x_ = x
#u_ = u
list(x = x, u = u, cost = cost, init_x = init_x, init_u = init_u, init_cost = init_cost, dt = dt)
}
res = gen_trajectory(x0,N)
res = gen_trajectory(x0,N, mode="control", rand = T)
soln = init_trajectory(x0,N)
init_x = x = x_ = soln$x_ ;  init_u = u = u_ = soln$u_
prev_cost = init_cost = compute_cost(x_,u_)
print(paste("initial cost = ", init_cost))
iter = 1
soln = init_trajectory(x0,N, mode = "control", rand = T)
init_x = x = x_ = soln$x_ ;  init_u = u = u_ = soln$u_
prev_cost = init_cost = compute_cost(x_,u_)
print(paste("initial cost = ", init_cost))
soln = init_trajectory(x0,N,mode="control", rand = T)
init_x = x = x_ = soln$x_ ;  init_u = u = u_ = soln$u_
prev_cost = init_cost = compute_cost(x_,u_)
print(paste("initial cost = ", init_cost))
iter = 1
for(n in N:2){
soln = ilqg(x0, n, ...) # maxIter = 50, eps=1e-3, logg =T)
x_[,(N-n+1):N] = soln$x
u_[,(N-n+1):(N-1)] = soln$u
cost = compute_cost(x_,u_)
if(cost < prev_cost){
## take steps
## update actual trajectory
x = x_
u = u_
}
cost = compute_cost(x,u)
print(paste("time_step", iter, ": cost =",cost))
prev_cost = cost
x0 = x[,(N-n+2)]
iter = iter+1
}
gen_trajectory = function(x0, N,...){
soln = init_trajectory(x0,N,mode="control", rand = T)
init_x = x = x_ = soln$x_ ;  init_u = u = u_ = soln$u_
prev_cost = init_cost = compute_cost(x_,u_)
print(paste("initial cost = ", init_cost))
iter = 1
for(n in N:2){
soln = ilqg(x0, n, ...) # maxIter = 50, eps=1e-3, logg =T)
x_[,(N-n+1):N] = soln$x
u_[,(N-n+1):(N-1)] = soln$u
cost = compute_cost(x_,u_)
if(cost < prev_cost){
## take steps
## update actual trajectory
x = x_
u = u_
}
cost = compute_cost(x,u)
print(paste("time_step", iter, ": cost =",cost))
prev_cost = cost
x0 = x[,(N-n+2)]
iter = iter+1
}
#x_ = x
#u_ = u
list(x = x, u = u, cost = cost, init_x = init_x, init_u = init_u, init_cost = init_cost, dt = dt)
}
gen_trajectory(x0,N,mode = "control",rand  = T)
res = gen_trajectory(x0,N,mode = "control",rand  = T)
str(res)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
res = gen_trajectory(x0,N,mode = "control",rand  = T)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
res = gen_trajectory(x0,N,mode = "lin_x",rand  = F)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
res = gen_trajectory(c(1,2),N,mode = "lin_x",rand  = F)
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "lin_x", rand = T)
res = ilqg(c(1,2), N, maxIter = 100, logg = T, mode = "lin_x", rand = T)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
res = ilqg(c(1,2.5), N, maxIter = 100, logg = T, mode = "lin_x", rand = T)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
res = ilqg(c(1.5,2), N, maxIter = 100, logg = T, mode = "lin_x", rand = T)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "lin_x", rand = T)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
h = function(x) {
## h defines the system costs in the final state. ##
#(t(x)%*%Qf%*%x)
100*(t(x)%*%Qf%*%x)/(10+(t(x)%*%Qf%*%x))
}
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "lin_x", rand = T)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
h = function(x) {
## h defines the system costs in the final state. ##
#(t(x)%*%Qf%*%x)
100*(t(x)%*%Qf%*%x)/(0.1+(t(x)%*%Qf%*%x))
}
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "lin_x", rand = T)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
h = function(x) {
## h defines the system costs in the final state. ##
#(t(x)%*%Qf%*%x)
100*(t(x)%*%Qf%*%x)/(0.5+(t(x)%*%Qf%*%x))
}
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "lin_x", rand = T)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "lin_x", rand = T)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
h = function(x) {
## h defines the system costs in the final state. ##
#(t(x)%*%Qf%*%x)
100*(t(x)%*%Qf%*%x)/(2+(t(x)%*%Qf%*%x))
}
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "lin_x", rand = T)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "lin_x", rand = T)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "lin_x", rand = T)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "control", rand = T)
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "control", rand = T)
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "control", rand = T)
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "control", rand = T)
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "control", rand = T)
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "control", rand = T)
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "control", rand = T)
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "control", rand = T)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "control", rand = T)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "control", rand = F)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "control", rand = F)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
init_trajectory = function(x0, N, mode = "control", rand =F){
if(mode == "lin_x"){
## initialize a trajectory
u_ = array(0,c(nu,N-1))
x_ = array(0,c(nx,N))
for(i in 1:nx){
x_[i,] = seq(x0[i],xf[i], length = N)
}
for(k in 1:(N-1)){
xdot = (x_[,k+1]-x_[,k])/dt
u_[,k] = root2(f,xdot,x0=rep(1,nx), x=x_[,k])
}
}
if(mode == "control"){
## initialize a trajectory
if(rand){
temp = rnorm(nu*(N-1),sd=0.1)
} else{
temp = 1
}
u_ = array(temp,c(nu,N-1))
x_ = array(0,c(nx,N))
x_[,1] = x0
for(k in 1:(N-1)){
x_[,k+1] = x_[,k] + f(x_[,k], u_[,k])*dt
}
}
list(x_ = x_, u_ = u_)
}
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "control", rand = F)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
init_trajectory = function(x0, N, mode = "control", rand =F){
if(mode == "lin_x"){
## initialize a trajectory
u_ = array(0,c(nu,N-1))
x_ = array(0,c(nx,N))
for(i in 1:nx){
x_[i,] = seq(x0[i],xf[i], length = N)
}
for(k in 1:(N-1)){
xdot = (x_[,k+1]-x_[,k])/dt
u_[,k] = root2(f,xdot,x0=rep(1,nx), x=x_[,k])
}
}
if(mode == "control"){
## initialize a trajectory
if(rand){
temp = rnorm(nu*(N-1),sd=0.1)
} else{
temp = 0.1
}
u_ = array(temp,c(nu,N-1))
x_ = array(0,c(nx,N))
x_[,1] = x0
for(k in 1:(N-1)){
x_[,k+1] = x_[,k] + f(x_[,k], u_[,k])*dt
}
}
list(x_ = x_, u_ = u_)
}
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "control", rand = F)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "lin_x", rand = F)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
Qf
h = function(x) {
## h defines the system costs in the final state. ##
#(t(x)%*%Qf%*%x)
100*(t(x)%*%Qf%*%x)/(1+(t(x)%*%Qf%*%x))
}
Qf
Qf = Qf/10
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "lin_x", rand = F)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
Qf = Qf/100
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "lin_x", rand = F)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
Qf
res$x[,100]
h(res$x[,100])
h(c(10,10))
h(c(100,100))
h(c(0.1,0.1))
Qf = 1000*Qf
Qf
Qf = 1000*Qf
Qf
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "lin_x", rand = F)
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "lin_x", rand = F)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "control", rand = F)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
res = ilqg(c(2,2), N, maxIter = 100, logg = T, mode = "control", rand = T)
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, logg = T, mode = "lin_x", rand = T)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
par(new=T)
W = to_World(res$u)
plot(t(W$x), col=3, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
par(new=T)
vec_plot(W,xlim = c(-1,3), ylim = c(-1,3))
x
rm(list = ls())
x = (-100:100)/10
x
y = x^2*exp(-x)
plot(x,y, type='l')
y = x^2*exp(-x^2)
plot(x,y, type='l')
y = x*exp(-x^2)
y = exp(-x^2)
plot(x,y, type='l')
plot(x,x*y, type='l')
plot(x,x^2*y, type='l')
plot(x,x^4*y, type='l')
plot(x,x*exp(-abs(x)), type='l')
plot(x,x^2*exp(-abs(x)), type='l')
plot(x,x^2 + exp(-abs(x)), type='l')
