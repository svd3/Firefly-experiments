Nseq = c((ans[[1]]-1)*2 : (ans[[1]]+1)*2)
Nseq
Nseq*0.5
ans[[1]
]
(ans[[1]]-1)*2
(ans[[1]]+1)*2
Nseq = c((ans[[1]]-1)*2 : (ans[[1]]+1)*2)
Nseq
(ans[[1]]-1)*2
(ans[[1]]+1)*2
Nseq = c(((ans[[1]]-1)*2) : ((ans[[1]]+1)*2))
Nseq
ans = optimal_N(Nseq,kx=50,dt=0.5)
ans
ans$Nopt
(10:14)*0.5
ans$Nopt
Nseq = seq(ans[[1]]*5-4, ans[[1]]*5+4, 1) #9 here
Nseq
ans = optimal_N(Nseq, kx = 50, dt = 0.1)
# dt = 1
Nseq = c(2:10)
ans = optimal_N(Nseq,kx=50,dt=1)
# dt = 0.5
Nseq = c(((ans[[1]]-1)*2) : ((ans[[1]]+1)*2))
ans = optimal_N(Nseq,kx=50,dt=0.5)
ans$Nopt
ans$Nopt*0.5
ans$Nopt*0.5/0.1
seq(ans[[1]]*5-4, ans[[1]]*5+4, 1)*0.25
seq(ans[[1]]*5-4, ans[[1]]*5+4, 1)*2
seq(ans[[1]]*5-4, ans[[1]]*5+4, 1)
seq(ans[[1]]*2-2, ans[[1]]*2+2, 1)
seq(ans[[1]]*2-2, ans[[1]]*2+2, 1)*0.25
system.time({Nseq = seq(10,100,10) ## 10 iterations
ans = optimal_N(Nseq, kx=50)
Nseq = seq(ans[[1]]-9, ans[[1]]+9, 5) #4 here
ans = optimal_N(Nseq, kx = 50)
Nseq = seq(ans[[1]]-4, ans[[1]]+4, 1) #9 here
ans = optimal_N(Nseq, kx = 50))}
system.time({Nseq = seq(10,100,10) ## 10 iterations
ans = optimal_N(Nseq, kx=50,dt=0.1)
Nseq = seq(ans[[1]]-9, ans[[1]]+9, 5) #4 here
ans = optimal_N(Nseq, kx = 50, dt=0.1)
Nseq = seq(ans[[1]]-4, ans[[1]]+4, 1) #9 here
ans = optimal_N(Nseq, kx = 50, dt=0.1))}
## heirachical approach
system.time({Nseq = seq(10,100,10) ## 10 iterations
ans = optimal_N(Nseq, kx=50,dt=0.1)
Nseq = seq(ans[[1]]-9, ans[[1]]+9, 5) #4 here
ans = optimal_N(Nseq, kx = 50, dt=0.1)
Nseq = seq(ans[[1]]-4, ans[[1]]+4, 1) #9 here
ans = optimal_N(Nseq, kx = 50, dt=0.1)})
ans$Nopt
system.time({# dt = 1
Nseq = c(2:10)
ans = optimal_N(Nseq,kx=50,dt=1)
# dt = 0.5
Nseq = c(((ans[[1]]-1)*2) : ((ans[[1]]+1)*2))
ans = optimal_N(Nseq,kx=50,dt=0.5)
# dt = 0.25
Nseq = seq(ans[[1]]*5-4, ans[[1]]*5+4, 1) #9 here
ans = optimal_N(Nseq, kx = 50, dt = 0.1)})
ans$Nopt
Nseq = c(2:10) # 20 30 40 50 60 70 80 90 100
ans = optimal_N(Nseq,kx=50,dt=1)
c(((ans[[1]]-1)*2) : ((ans[[1]]+1)*2))
c(((ans[[1]]-1)*2) : ((ans[[1]]+1)*2))*0.5/0.1
ans[[1]]
seq((60-9), (69),5)
Nseq = c(2:10) # 20 30 40 50 60 70 80 90 100
ans = optimal_N(Nseq,kx=50,dt=1)
ans
ans[[1]]
ans*2
c((ans[[1]]*2 -1): (ans[[1]]*2 +1))
Nseq = c((ans[[1]]*2 -1): (ans[[1]]*2 +1)) # 50 55 60 65 70
ans = optimal_N(Nseq,kx=50,dt=0.5)
ans[[1]]
11*0.5
system.time({# dt = 1
Nseq = c(2:10) # 20 30 40 50 60 70 80 90 100
ans = optimal_N(Nseq,kx=50,dt=1)
# dt = 0.5
Nseq = c((ans[[1]]*2 -1): (ans[[1]]*2 +1)) # 50 55 60 65 70
ans = optimal_N(Nseq,kx=50,dt=0.5)
# dt = 0.25
Nseq = seq(ans[[1]]*5-5, ans[[1]]*5+5, 1) #9 here
ans = optimal_N(Nseq, kx = 50, dt = 0.1)})
ans[[1]]
system.time({Nseq = seq(10,100,10) ## 10 iterations
ans = optimal_N(Nseq, kx=50,dt=0.1)
Nseq = seq(ans[[1]]-9, ans[[1]]+9, 5) #4 here
ans = optimal_N(Nseq, kx = 50, dt=0.1)
Nseq = seq(ans[[1]]-4, ans[[1]]+4, 1) #9 here
ans = optimal_N(Nseq, kx = 50, dt=0.1)})
ans[[1]]
Nseq = c(2:10) # 20 30 40 50 60 70 80 90 100
ans = optimal_N(Nseq,kx=50,dt=1)
# dt = 0.5
Nseq = c((ans[[1]]*2 -1): (ans[[1]]*2 +1)) # 50 55 60 65 70
ans = optimal_N(Nseq,kx=50,dt=0.5)
Nseq = seq(ans[[1]]*5-5, ans[[1]]*5+5, 1) #9 here
Nseq
## heirachical approach
system.time({Nseq = seq(10,100,10) ## 10 iterations
ans = optimal_N(Nseq, kx=50,dt=0.1)
Nseq = seq(10,100,10) ## 10 iterations
ans = optimal_N(Nseq, kx=50,dt=0.1)
ans[[1]]
Nseq = c(2:10) # 20 30 40 50 60 70 80 90 100
ans = optimal_N(Nseq,kx=50,dt=1)
print(ans[[1]]/0.1)
Nseq = c((ans[[1]]*2 -1): (ans[[1]]*2 +1)) # 50 55 60 65 70
ans = optimal_N(Nseq,kx=50,dt=0.5)
print(ans[[1]]*0.5/0.1)
seq(ans[[1]]*5-5, ans[[1]]*5+5, 1)
seq(ans[[1]]*5-10, ans[[1]]*5+4, 1)
5.5/0.5
c((ans[[1]]*2 -2): (ans[[1]]*2 +2))
ans[[1]] = 6
c((ans[[1]]*2 -2): (ans[[1]]*2 +2))
c((ans[[1]]*2 -4): (ans[[1]]*2 +4))
Nseq = c(2:10) # 20 30 40 50 60 70 80 90 100
ans = optimal_N(Nseq,kx=50,dt=1)
print(ans[[1]]/0.1)
# dt = 0.5
Nseq = c((ans[[1]]*2 -4): (ans[[1]]*2 +4)) # 50 55 60 65 70
ans = optimal_N(Nseq,kx=50,dt=0.5)
print(ans[[1]]*0.5/0.1)
# dt = 0.25
Nseq = seq(ans[[1]]*5-5, ans[[1]]*5+5, 1) #9 here
ans = optimal_N(Nseq, kx = 50, dt = 0.1)
Nseq = c(2:10) # 20 30 40 50 60 70 80 90 100
ans = optimal_N(Nseq,kx=50,dt=1)
print(ans[[1]]/0.1)
# dt = 0.5
Nseq = c((ans[[1]]*2 -4): (ans[[1]]*2 +4)) # 50 55 60 65 70
ans = optimal_N(Nseq,kx=50,dt=0.5)
print(ans[[1]]*0.5/0.1)
seq(ans[[1]]*5-5, ans[[1]]*5+5, 1)
system.time({# dt = 1
Nseq = c(2:10) # 20 30 40 50 60 70 80 90 100
ans = optimal_N(Nseq,kx=50,dt=1)
print(ans[[1]]/0.1)
# dt = 0.5
Nseq = c((ans[[1]]*2 -4): (ans[[1]]*2 +4)) # 50 55 60 65 70
ans = optimal_N(Nseq,kx=50,dt=0.5)
print(ans[[1]]*0.5/0.1)
# dt = 0.25
Nseq = seq(ans[[1]]*5-5, ans[[1]]*5+5, 1) #9 here
ans2 = optimal_N(Nseq, kx = 50, dt = 0.1)})
Nseq = seq(ans[[1]]*5-5, ans[[1]]*5+5, 1) #9 here
ans2 = optimal_N(Nseq, kx = 50, dt = 0.1)
ans2[[1]]
Nseq = c(2:10) # 20 30 40 50 60 70 80 90 100
ans = optimal_N(Nseq,kx=50,dt=1)
print(ans[[1]]/0.1)
Nseq = c(2:10) # 20 30 40 50 60 70 80 90 100
ans = optimal_N(Nseq,kx=50,dt=1)
print(ans[[1]]/0.1)
# dt = 0.5
Nseq = c((ans[[1]]*2 -4): (ans[[1]]*2 +4)) # 50 55 60 65 70
ans = optimal_N(Nseq,kx=50,dt=0.5)
print(ans[[1]]*0.5/0.1)
ans[[1]]
seq(ans[[1]]*2-5, ans[[1]]*2+5, 1)
seq(ans[[1]]*2-5, ans[[1]]*2+5, 1)*0.25
seq(ans[[1]]*2-2, ans[[1]]*2+2, 1)
seq(ans[[1]]*2-2, ans[[1]]*2+2, 1)*0.25
Nseq = seq(ans[[1]]*2-2, ans[[1]]*2+2, 1) #5 here
ans = optimal_N(Nseq, kx = 50, dt = 0.25)
print(ans[[1]]*0.25/0.1)
2.5
47.5*2.5
ans[[1]]
temp = round(ans[[1]]*2.5)
temp
Nseq = seq(10,100,10)
sum(Nseq)
Nseq = c(2:10) # 20 30 40 50 60 70 80 90 100
ans = optimal_N(Nseq,kx=50,dt=1)
print(ans[[1]]/0.1)
# dt = 0.5
Nseq = c((ans[[1]]*2 -4): (ans[[1]]*2 +4)) # 50 55 60 65 70
ans = optimal_N(Nseq,kx=50,dt=0.5)
print(ans[[1]]*0.5/0.1)
# dt = 0.25
Nseq = seq(ans[[1]]*2-2, ans[[1]]*2+2, 1) #5 here
ans = optimal_N(Nseq, kx = 50, dt = 0.25)
print(ans[[1]]*0.25/0.1)
temp = round(ans[[1]]*2.5)
Nseq = seq(temp-3, temp+3, 1) #6 here
ans = optimal_N(Nseq, kx = 50, dt = 0.1)
ans
ans[[1]]
Nseq = c(2:10) # 20 30 40 50 60 70 80 90 100
s
s = sum(Nseq)
s
Nseq = c(2:10) # 20 30 40 50 60 70 80 90 100
ans = optimal_N(Nseq,kx=50,dt=1)
Nseq = c((ans[[1]]*2 -4): (ans[[1]]*2 +4)) # 50 55 60 65 70
s = s + sum(Nseq)
s
ans = optimal_N(Nseq,kx=50,dt=0.5)
Nseq = seq(ans[[1]]*2-2, ans[[1]]*2+2, 1) #5 here
s = s + sum(Nseq)
ans = optimal_N(Nseq, kx = 50, dt = 0.25)
temp = round(ans[[1]]*2.5)
Nseq = seq(temp-3, temp+3, 1) #6 here
s = s + sum(Nseq)
s
ans = optimal_N(Nseq, kx = 50, dt = 0.1)
ans[[1]]
system.time({# dt = 1
Nseq = c(2:10) # 20 30 40 50 60 70 80 90 100
ans = optimal_N(Nseq,kx=50,dt=1)
# dt = 0.5
Nseq = c((ans[[1]]*2 -4): (ans[[1]]*2 +4)) # 50 55 60 65 70
ans = optimal_N(Nseq,kx=50,dt=0.5)
# dt = 0.25
Nseq = seq(ans[[1]]*2-2, ans[[1]]*2+2, 1) #5 here
ans = optimal_N(Nseq, kx = 50, dt = 0.25)
temp = round(ans[[1]]*2.5)
Nseq = seq(temp-3, temp+3, 1) #6 here
ans = optimal_N(Nseq, kx = 50, dt = 0.1)
})
Nseq = seq(10,100,10) ## 10 iterations
s = sum(Nseq)
ans = optimal_N(Nseq, kx=50,dt=0.1)
Nseq = seq(ans[[1]]-9, ans[[1]]+9, 5) #4 here
s = s + sum(Nseq)
s
ans = optimal_N(Nseq, kx = 50, dt=0.1)
Nseq = seq(ans[[1]]-4, ans[[1]]+4, 1) #9 here
s = s + sum(Nseq)
s
ans = optimal_N(Nseq, kx = 50, dt=0.1)
ans[[1]]
system.time({
Nseq = seq(10,100,10) ## 10 iterations
ans = optimal_N(Nseq, kx=50,dt=0.1)
Nseq = seq(ans[[1]]-9, ans[[1]]+9, 5) #4 here
ans = optimal_N(Nseq, kx = 50, dt=0.1)
Nseq = seq(ans[[1]]-4, ans[[1]]+4, 1) #9 here
ans = optimal_N(Nseq, kx = 50, dt=0.1)
})
source('~/Documents/Acads/FireflyProject-master/Rcodes/Ver 3.0 test/optimal_tf.R')
amax=1
d
f
F
Fn
G
source('~/Documents/Acads/FireflyProject-master/Rcodes/Ver 3.0 test/optimal_tf.R')
res = opt_time()
res = res$res
plot(c(res$u[1,]), type='l', ylim = c(0,0.5), col=2, ylab = NA)
plot(c(res$u[1,]), type='l', ylim = c(-1,1), col=2, ylab = NA)
amax = 0.1
res2 = opt_time()
res2 = res2$res
par(new=T)
plot(c(res2$u[1,]), type='l', ylim = c(-1,1), col=1, ylab = NA)
length(res2$u[1,])
plot(c(res2$u[1,]), type='l', xlim = c(0,130),ylim = c(-1,1), col=1, ylab = NA)
par(new=T)
plot(c(res$u[1,]), type='l', xlim = c(0,130),ylim = c(-1,1), col=2, ylab = NA)
abline(h=0)
Nseq = c(2:10) # 20 30 40 50 60 70 80 90 100
ans = optimal_N(Nseq,kx=50,dt=1)
amax=1
Nseq = c(2:10) # 20 30 40 50 60 70 80 90 100
ans = optimal_N(Nseq,kx=50,dt=1)
c((ans[[1]]*2 -4): (ans[[1]]*2 +4))
c((ans[[1]]*2 -4): (ans[[1]]*2 +4))*10
c((ans[[1]]*2 -4): (ans[[1]]*2 +4))*0.5
Nseq = c((ans[[1]]*2 -4): (ans[[1]]*2 +4)) # 50 55 60 65 70
ans = optimal_N(Nseq,kx=50,dt=0.5)
ans[[1]]
Nseq = c(2:10) # 20 30 40 50 60 70 80 90 100
ans = optimal_N(Nseq,kx=50,dt=1)
Nseq = seq((ans[[1]]*2 -4),(ans[[1]]*2 +4),2) # 50 55 60 65 70
Nseq
Nseq*0.5
Nseq = seq(2,20,5) # 20 30 40 50 60 70 80 90 100
ans = optimal_N(Nseq,kx=50,dt=1)
ans[[1]]
seq((ans[[1]]*2 -4),(ans[[1]]*2 +4),2)*0.5
Nseq = seq((ans[[1]]*2 -4),(ans[[1]]*2 +4),2) # 50 55 60 65 70
ans = optimal_N(Nseq,kx=50,dt=0.5)
ans[[1]]
ans[[1]]/2
seq(ans[[1]]*2-2, ans[[1]]*2+2, 1)
seq(ans[[1]]*2-2, ans[[1]]*2+2, 1)*0.25
ans = optimal_N(Nseq, kx = 50, dt = 0.25)
Nseq = seq(ans[[1]]*2-2, ans[[1]]*2+2, 1) #5 here
ans = optimal_N(Nseq, kx = 50, dt = 0.25)
ans[[1]]
ans[[1]]*0.25
temp = round(ans[[1]]*2.5)
temp
seq(2,20,5)
Nseq = seq(2,20,5) # 20 30 40 50 60 70 80 90 100
ans = optimal_N(Nseq,kx=50,dt=1)
Nseq = seq((ans[[1]]*2 -4),(ans[[1]]*2 +4),2) # 50 55 60 65 70
ans = optimal_N(Nseq,kx=50,dt=0.5)
ans[[1]]*0.5
seq(ans[[1]]*2-2, ans[[1]]*2+2, 1)
seq(ans[[1]]*2-2, ans[[1]]*2+2, 1)*0.25
seq(ans[[1]]*2-2, ans[[1]]*2+2, 2)
seq(ans[[1]]*2-2, ans[[1]]*2+2, 2)*0.25
Nseq = seq(ans[[1]]*2-2, ans[[1]]*2+2, 2) #5 here
ans = optimal_N(Nseq, kx = 50, dt = 0.25)
temp = round(ans[[1]]*2.5)
temp
opt_time = function(){
# dt = 1
Nseq = seq(2,20,5) # 20 30 40 50 60 70 80 90 100
ans = optimal_N(Nseq,kx=50,dt=1)
# dt = 0.5
Nseq = seq((ans[[1]]*2 -4),(ans[[1]]*2 +4),2) # 50 55 60 65 70
ans = optimal_N(Nseq,kx=50,dt=0.5)
# dt = 0.25
Nseq = seq(ans[[1]]*2-2, ans[[1]]*2+2, 2) #5 here
ans = optimal_N(Nseq, kx = 50, dt = 0.25)
temp = round(ans[[1]]*2.5)
Nseq = seq(temp-2, temp+2, 1) #6 here
ans = optimal_N(Nseq, kx = 50, dt = 0.1)
ans
}
system.time(opt_time())
amax = 0.1
system.time(opt_time())
source('~/Documents/Acads/FireflyProject-master/Rcodes/Ver 3.0 test/optimal_tf.R')
source('~/Documents/Acads/FireflyProject-master/Rcodes/Ver 3.0 test/optimal_tf.R')
system.time(res = opt_time())
system.time({res = opt_time()})
length(res$u[1,])
plot(c(res$u[1,]), type='l', xlim = c(0,130),ylim = c(-1,1), col=2, ylab = NA)
plot(c(res$u[1,]), type='l', xlim = c(0,150),ylim = c(-1,1), col=2, ylab = NA)
amax_l = c(0.1,0.5,1,2,5)
source('~/Documents/Acads/FireflyProject-master/Rcodes/Ver 3.0 test/optimal_tf.R')
amax = 1
system.time({res = opt_time()})
source('~/Documents/Acads/FireflyProject-master/Rcodes/Ver 3.0 test/optimal_tf.R')
source('~/Documents/Acads/FireflyProject-master/Rcodes/Ver 3.0 test/optimal_tf.R')
N = opt_time()[[1]]
N
amax_l = c(0.1,0.5,1,2,5)
res_l2 = list()
for(i in 1:length(amax_l)){
amax = amax_l[i]
N = opt_time()[[1]]
res_l2[[i]] = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
}
res_t = res_l2[[1]]
res_t = res_l2[[1]]
plot(res_t$u[2,], type='l', ylim = c(-1,1),lty =2, col=1, ylab = NA, yaxt = "n", xlab = "time")
for(i in 2:length(amax_l)){
res_t = res_l2[[i]]
par(new=T)
plot(res_t$u[1,], type='l', ylim = c(-1,1), col=(i), yaxt="n", ylab = NA, xlab = NA)
}
axis(2)
res_t = res_l2[[1]]
plot(res_t$u[2,], type='l', xlim = c(0,150),ylim = c(-1,1),lty =2, col=1, ylab = NA, yaxt = "n", xlab = "time")
plot(res_t$u[1,], type='l', xlim = c(0,150),ylim = c(-1,1),lty =2, col=1, ylab = NA, yaxt = "n", xlab = "time")
res_t = res_l2[[1]]
plot(res_t$u[1,], type='l', xlim = c(0,150),ylim = c(-1,1),lty =2, col=1, ylab = NA, yaxt = "n", xlab = "time")
for(i in 2:length(amax_l)){
res_t = res_l2[[i]]
par(new=T)
plot(res_t$u[1,], type='l', xlim = c(0,150), ylim = c(-1,1), col=(i), yaxt="n", ylab = NA, xlab = NA)
}
axis(2)
grid()
dt = 1; N =5
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-0.5,3), ylim = c(-0.5,3), col=3, asp=1)
dt = 0.5; N = 10
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
par(new=T)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-0.5,3), ylim = c(-0.5,3), col=3, asp=1)
dt = 0.1; N = 50
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
par(new=T)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-0.5,3), ylim = c(-0.5,3), col=3, asp=1)
par(new=T)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-0.5,3), ylim = c(-0.5,3), col=2, asp=1)
dt = 0.02; N =250
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
par(new=T)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-0.5,3), ylim = c(-0.5,3), col=3, asp=1)
tau
tau = 1
amax_l = c(0.1,0.5,1,2,5)
res_l3 = list()
for(i in 1:length(amax_l)){
amax = amax_l[i]
N = opt_time()[[1]]
res_l3[[i]] = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
}
res_t = res_l3[[1]]
plot(res_t$u[1,], type='l', xlim = c(0,150),ylim = c(-1,1),lty =1, col=1, ylab = NA, yaxt = "n", xlab = "time")
for(i in 2:length(amax_l)){
res_t = res_l3[[i]]
par(new=T)
plot(res_t$u[1,], type='l', xlim = c(0,150), ylim = c(-1,1), col=(i), yaxt="n", ylab = NA, xlab = NA)
}
axis(2)
res_t = res_l3[[1]]
plot(res_t$u[1,], type='l', xlim = c(0,200),ylim = c(-1,1),lty =1, col=1, ylab = NA, yaxt = "n", xlab = "time")
for(i in 2:length(amax_l)){
res_t = res_l3[[i]]
par(new=T)
plot(res_t$u[1,], type='l', xlim = c(0,200), ylim = c(-1,1), col=(i), yaxt="n", ylab = NA, xlab = NA)
}
axis(2)
grid()
res
str(res)
tau = c(0.1,0.5,1,2,5)
tau_l = c(0.1,0.5,1,2,5)
resl = list()
for(i in 1:length(tau_l)){
tau = tau_l[i]
N = opt_time()[[1]]
resl[[i]] = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
}
plot(c(resl[[1]]$x[4,]), type='l', ylim = c(0,1),xlim = c(1,200),lty =2, col=1, ylab = NA, yaxt = "n", xlab = "time", main = "ang. vel. profiles")
for(i in 2:length(tau_l)){
res_t = resl[[i]]
par(new=T)
plot(res_t$x[4,], type='l', ylim = c(0,1), xlim = c(1,200), col=(i), yaxt="n", ylab = NA, xlab = NA)
}
plot(c(resl[[1]]$x[4,]), type='l', ylim = c(0,1),xlim = c(1,50),lty =2, col=1, ylab = NA, yaxt = "n", xlab = "time", main = "ang. vel. profiles")
for(i in 2:length(tau_l)){
res_t = resl[[i]]
par(new=T)
plot(res_t$x[4,], type='l', ylim = c(0,1), xlim = c(1,50), col=(i), yaxt="n", ylab = NA, xlab = NA)
}
plot(c(resl[[1]]$x[4,]), type='l', ylim = c(0,1.2),xlim = c(1,50),lty =2, col=1, ylab = NA, yaxt = "n", xlab = "time", main = "ang. vel. profiles")
for(i in 2:length(tau_l)){
res_t = resl[[i]]
par(new=T)
plot(res_t$x[4,], type='l', ylim = c(0,1.2), xlim = c(1,50), col=(i), yaxt="n", ylab = NA, xlab = NA)
}
plot(c(resl[[1]]$x[4,]), type='l', ylim = c(0,1.2),xlim = c(1,50),lty =2, col=1, ylab = NA, yaxt = "n", xlab = "time", main = "vel. profiles")
for(i in 2:length(tau_l)){
res_t = resl[[i]]
par(new=T)
plot(res_t$x[4,], type='l', ylim = c(0,1.2), xlim = c(1,50), col=(i), yaxt="n", ylab = NA, xlab = NA)
}
axis(2,at= c(0,0.5,1))
tau
amax = 10
tau = 10
opt_time()[[1]]
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
N = 53
dt
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
plot(res$x[4,], type= 'l', ylim = c(0,1))
plot(res$x[4,], type= 'l', ylim = c(0,0.6))
plot(res$x[4,], type= 'l', ylim = c(0,0.75))
plot(res$x[4,], type= 'l', ylim = c(0,1))
par(new=T)
plot(c(res$u[1,],0), col = 2, type= 'l', ylim = c(0,1))
plot(c(0,res$u[1,]), col = 2, type= 'l', ylim = c(0,1))
par(new=T)
plot(res$x[4,], type= 'l', ylim = c(0,1))
source("ilqg.R")
N
x0
xt
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
tau = 5
amax = 1
source("ilqg.R")
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-0.5,3), ylim = c(-0.5,3), col=3, asp=1)
dt
tau
Q
Qf
amax
tau = 0
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-0.5,3), ylim = c(-0.5,3), col=3, asp=1)
tau = 2
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
par(new=T)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-0.5,3), ylim = c(-0.5,3), col=3, asp=1)
tau = 5
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
par(new=T)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-0.5,3), ylim = c(-0.5,3), col=3, asp=1)
plot(res$x[4,], type='l', ylim = c(0,0.5), col=1, ylab = NA)
N  =200
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
plot(res$x[4,], type='l', ylim = c(0,0.5), col=1, ylab = NA)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-0.5,3), ylim = c(-0.5,3), col=3, asp=1)
source("ilqg.R")
tau = 10
amax = 10
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
par(new=T)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-0.5,3), ylim = c(-0.5,3), col=3, asp=1)
