library(pracma)
t
x = 1:100
y1 = 10*sin(2*pi*x/50)
y2 = 10*sin(2*pi*(x+15)/50)
y1 = 10*sin(2*pi*x/50) + rnorm(100, sd = 0.1)
X = fft(y1)
Y = fft(y2)
Sxy = X*Conj(Y)
Sxx = X*Conj(X)
Syy = Y*Conj(Y)
sig = Mod(Sxy)^2/(Sxx*Syy)
sig
Sxy = Y*Conj(X)
sig = Mod(Sxy)^2/(Sxx*Syy)
sig
Sxy
Sxx*Syy
y2 = 5*sin(2*pi*(x+15)/25)
plot(y1)
par(new=T)
plot(y2)
Y = fft(y2)
Sxy = X*Conj(Y)
Syy = Y*Conj(Y)
sig = Mod(Sxy)^2/(Sxx*Syy)
sif
sig
y2 = 10*rnorm(100)
Y = fft(y2)
Syy = Y*Conj(Y)
Sxy = X*Conj(Y)
sig = Mod(Sxy)^2/(Sxx*Syy)
sig
y2 = 5*sin(2*pi*(x+15)/50)
y1 = 5*sin(2*pi*(x)/50)
Y1 = fft(y1)
Y2 = fft(y2)
temp = Y1/Y2
temp
mean(Y)
Y1
Y2
plot(Y1)
plot(Y1, type='o')
Y1
plot(Mod(Y1), type='o')
plot(Mod(Y2), type='o')
Y1[1]
Y1[2]
Y1[2]
Y1[1]
which.max(Mod(Y1))
Y1[3]
Y2[3]
Y1[3]/Y2[3]
Mod(Y1[3]/Y2[3])
Arg(Y1[3]/Y2[3])
x = 0:100
y1 = sin(2*pi*x/50) + rnorm(100,0,0.1)
y2 = sin(2*pi*(x+15)/50) + rnorm(100,0,0.1)
x = 1:100
y1 = sin(2*pi*x/50) + rnorm(100,0,0.1)
y2 = sin(2*pi*(x+15)/50) + rnorm(100,0,0.1)
Y1 = fft(y1)
Y2 = fft(y2)
plot(Mod(Y1/Y2), type='o')
Y!
Y1
Mod(Y1)
Mod(Y@)
Mod(Y2)
which.max(Mod(Y1/Y2))
Y1[63]
Y2[63]
Mod(Y1)[63]
Mod(Y2)[63]
plot(Mod(Y1))
plot(Mod(Y1), type='l')
plot(Mod(Y2), type='l')
par(new=T)
plot(Mod(Y1), type='l')
x = 1:100
Y1 = 0
Y2 = 0
for(i in 1:100){
y1 = sin(2*pi*x/50) + rnorm(100,0,0.1)
y2 = sin(2*pi*(x+15)/50) + rnorm(100,0,0.1)
Y1 = Y1 + fft(y1)/100
Y2 = Y2 + fft(y2)/100
}
plot(Mod(Y2), type='l')
plot(Mod(Y1), type='l')
plot(Mod(Y1/Y2), type='l')
mean(Y1/Y2)
mean(Y1)
temp = Y1/Y2
mean(temp[1:50])
Mod(mean(temp[1:50]))
Arg(mean(temp[1:50]))
which.max(Mod(Y1))
Arg(temp[3])
x = 1:100
Y1 = 0
Y2 = 0
for(i in 1:1000){
y1 = sin(2*pi*x/50) + rnorm(100,0,0.1)
y2 = sin(2*pi*(x+15)/50) + rnorm(100,0,0.1)
Y1 = Y1 + fft(y1)/1000
Y2 = Y2 + fft(y2)/1000
}
plot(Mod(Y1))
plot(Mod(Y1), type='l')
Y1
Y2
Y1/Y2
Arg(Y1/Y2)
mean(Arg(Y1/Y2)[1:50]
)
mean(Arg(Y1/Y2)[1:50])
mean(Arg(Y1/Y2)[2:50])
plot(Arg(Y1/Y2)[2:50])
plot(Arg(Y1/Y2)[2:50], type='l')
-pi
pi
a = Arg(Y1/Y2)
a
a[3]
a[3]*100/(2*pi*2)
a[4]*100/(2*pi*3)
a[6]*100/(2*pi*5)
a[2]*100/(2*pi*1)
source("gen_trajectory.R")
setwd("Documents/Acads/FireflyProject-master/Rcodes/Ver 1.1")
source("gen_trajectory.R")
Qf = 1000*diag(2)
Q = array(0,c(2,2))
R = array(c(10,0,0,2), c(2,2))
## iterative ilqg
x0 = c(2,2)
dt = 0.1
dt =1
N = 500
N = 2
init_trajectory = function(x0, N, mode = "lin_x", rand =F){
if(mode == "lin_x"){
## initialize a trajectory
u_ = array(0,c(nu,N-1))
x_ = array(0,c(nx,N))
for(i in 1:nx){
x_[i,] = seq(x0[i],xf[i], length = N)
}
for(k in 1:(N-1)){
xdot = (x_[,k+1]-x_[,k])/dt
u_[,k] = root2(f,xdot,x0=c(1,1), x=x_[,k])
}
}
if(mode == "control"){
## initialize a trajectory
if(rand){
temp = rnorm(nu*(N-1),sd=0.1)
} else{
temp = 0
}
u_ = array(temp,c(nu,N-1))
x_ = array(0,c(nx,N))
x_[,1] = x0
for(k in 1:(N-1)){
x_[,k+1] = x_[,k] + f(x_[,k], u_[,k])*dt
}
}
list(x_ = x_, u_ = u_)
}
N = 2
init_trajectory(x0,N)
res = ilqg(x0, N, maxIter = 100, logg = T)
res
init_trajectory = function(x0, N, mode = "control", rand =F){
if(mode == "lin_x"){
## initialize a trajectory
u_ = array(0,c(nu,N-1))
x_ = array(0,c(nx,N))
for(i in 1:nx){
x_[i,] = seq(x0[i],xf[i], length = N)
}
for(k in 1:(N-1)){
xdot = (x_[,k+1]-x_[,k])/dt
u_[,k] = root2(f,xdot,x0=c(1,1), x=x_[,k])
}
}
if(mode == "control"){
## initialize a trajectory
if(rand){
temp = rnorm(nu*(N-1),sd=0.1)
} else{
temp = 0
}
u_ = array(temp,c(nu,N-1))
x_ = array(0,c(nx,N))
x_[,1] = x0
for(k in 1:(N-1)){
x_[,k+1] = x_[,k] + f(x_[,k], u_[,k])*dt
}
}
list(x_ = x_, u_ = u_)
}
init_trajectory(x0,N)
res = ilqg(x0, N, maxIter = 100, logg = T)
res
init_trajectory(x0,N, mode= "l")
init_trajectory(x0,N, mode= "lin_x")
temp = init_trajectory(x0,N, mode= "lin_x")
compute_cost(temp$x_, temp$u_)
res = ilqg(x0, N, maxIter = 100, logg = T)
