myab(c(a0,b0))
myfun(c(a0,b0))
optim(c(1,-0.1),myfun)
myfun(c(1,-0.1))
myfun(c(1,-0.156))
myfun()
myfun
`a`
a
a
ab
a =1
b = -0.1
myfun
R = makeR(a,b)
x = create_trajectory(1)
J = sum((x - xo)^2)
J
myfun = function(ab){
a = ab[1]; b= ab[2]
R = makeR(a,b)
x = create_trajectory(1)
sum((x - xo)^2)
}
myfun(c(1,-0.1))
myfun(c(a0,b0))
xo
myfun()
myfun
R <<- makeR(beta[1],beta[2])
myfun = function(beta){
R <<- makeR(beta[1],beta[2])
x = create_trajectory(1)
sum((x - xo)^2)
}
myfun(c(1,-0.1))
myfun(c(a0,b0))
myfun(c(a0,b0+1))
optim(c(1,-0.1),myfun)
optim(c(1,-0.1),myfun,method = "BFGS")
optim(c(1,-0.1),myfun,method = "BFGS", maxit = 2)
optim(c(1,-0.1),myfun, maxit = 2)
optim(c(1,-0.1),myfun, control = list(maxit = 2), method = "BFGS")
optim(c(1,-0.1),myfun, control = list(maxit = 10), method = "BFGS")
print("\n")
print(newline)
create_trajectory = function(n,progress= T){
if(progress){
pb <- txtProgressBar(min = 0, max = n, style = 3)
}
x = array(0,c(n*N,2))
for(i in 1:n){
x0 = target[i,]
res = ilqg(x0, N, maxIter = 100, eps=1e-4, noise = T, logg = F, mode = "control", rand = F)
#x1[[i]] = t(res$x)
x[(N*i-N+1):(N*i),] = t(res$x) #
if(progress){
setTxtProgressBar(pb, i)
}
}
x
}
myfun = function(beta){
R <<- makeR(beta[1],beta[2])
x = create_trajectory(1,F)
sum((x - xo)^2)
}
op = optim(c(1.5,0.1),myfun, control = list(maxit = 5), method = "BFGS")
op
op = optim(op$par,myfun, control = list(maxit = 10), method = "BFGS")
op
setwd("Documents/Acads/FireflyProject-master/Rcodes/Ver 2.2")
source("ilqg.R")
a0 = 4
b0 = 4
makeR = function(a,b){
R = diag(2)
R[1,1] = a; R[2,1] = R[1,2] = b/2;
R
}
create_trajectory = function(n,progress= T){
if(progress){
pb <- txtProgressBar(min = 0, max = n, style = 3)
}
x = array(0,c(n*N,2))
for(i in 1:n){
x0 = target[i,]
res = ilqg(x0, N, maxIter = 100, eps=1e-4, noise = T, logg = F, mode = "control", rand = F)
#x1[[i]] = t(res$x)
x[(N*i-N+1):(N*i),] = t(res$x) #
if(progress){
setTxtProgressBar(pb, i)
}
}
x
}
R= makeR(a0,b0)
R
b0 = -4
R= makeR(a0,b0)
x0 = c(2,2)
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
1.5*1.5
R= makeR(2.25,-3)
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
R= makeR(1.45,-1.1)
a0= 1.45
b0=-1.1
R
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
res = ilqg(x0, N, maxIter = 100, eps=1e-3, noise = T, logg = T, mode = "control", rand = F)
W = to_World(res$u)
vec_plot(W,xlim = c(-1,3), ylim = c(-1,3), col=2)
r = runif(10,1.5,4)
th = runif(10,40,140)*pi/180
target = matrix(c(r*cos(th),r*sin(th)), ncol=2)
R0=R
R0
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
#plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
par(new=T)
W = to_World(res$u)
vec_plot(W,xlim = c(-1,3), ylim = c(-1,3), col=2)
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
#plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
par(new=T)
W = to_World(res$u)
vec_plot(W,xlim = c(-1,3), ylim = c(-1,3), col=2)
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
#plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
par(new=T)
W = to_World(res$u)
vec_plot(W,xlim = c(-1,3), ylim = c(-1,3), col=2)
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
#plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
par(new=T)
W = to_World(res$u)
vec_plot(W,xlim = c(-1,3), ylim = c(-1,3), col=2)
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
W = to_World(res$u)
vec_plot(W,xlim = c(-1,3), ylim = c(-1,3), col=2)
xo=create_trajectory(10)
myfun = function(beta){
R <<- makeR(beta[1],beta[2])
x = create_trajectory(10,F)
sum((x - xo)^2)
}
optim(c(1,-1),myfun)
optim(c(1,-1),myfun, control = list(maxit=2),method = "BFGS")
optim(c(1,-1),myfun, control = list(maxit=1),method = "BFGS")
source("ilqg.R")
R0
R = R0
xo=create_trajectory(10)
myfun = function(beta){
R <<- makeR(beta[1],beta[2])
x = create_trajectory(10,F)
sum((x - xo)^2)
}
optim(c(1,-1),myfun, control = list(maxit=1),method = "BFGS")
myfun = function(beta){
R <<- makeR(beta[1],beta[2])
x = create_trajectory(10,T)
sum((x - xo)^2)
}
optim(c(1,-1),myfun, control = list(maxit=1),method = "BFGS")
xo = create_trajectory(3)
r = runif(10,1.5,4)
th = runif(10,40,140)*pi/180
target = matrix(c(r*cos(th),r*sin(th)), ncol=2)
xo = create_trajectory(3)
myfun = function(beta){
R <<- makeR(beta[1],beta[2])
x = create_trajectory(3,T)
sum((x - xo)^2)
}
optim(c(1,-1),myfun, control = list(maxit=1),method = "BFGS")
a0
b0
R = makeR(a0,b0)
xo = create_trajectory(R)
R
xo = create_trajectory(3)
myfun = function(beta){
R <<- makeR(beta[1],beta[2])
x = create_trajectory(3,T)
sum((x - xo)^2)
}
xo = create_trajectory(1)
R
optim(c(1,-1),myfun, control = list(maxit=2),method = "BFGS")
myfun = function(beta){
R <<- makeR(beta[1],beta[2])
x = create_trajectory(1,T)
sum((x - xo)^2)
}
optim(c(1,-1),myfun, control = list(maxit=2),method = "BFGS")
xo = create_trajectory(3)
myfun = function(beta){
R <<- makeR(beta[1],beta[2])
x = create_trajectory(3,T)
sum((x - xo)^2)
}
optim(c(1,-1),myfun, control = list(maxit=2),method = "BFGS")
optim(c(1,-1),myfun, control = list(maxit=5),method = "BFGS")
a = 1.35
b = -0.91
R = R0
x0 = target[1,]
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
W = to_World(res$u)
vec_plot(W,xlim = c(-1,3), ylim = c(-1,3), col=2)
x0 = target[2,]
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
#plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
par(new=T)
W = to_World(res$u)
vec_plot(W,xlim = c(-1,3), ylim = c(-1,3), col=2)
x0 = target[3,]
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
#plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
par(new=T)
W = to_World(res$u)
vec_plot(W,xlim = c(-1,3), ylim = c(-1,3), col=2)
a
R = makeR(a,b)
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
#plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
par(new=T)
W = to_World(res$u)
vec_plot(W,xlim = c(-1,3), ylim = c(-1,3), col=3)
x0 = target[2,]
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
#plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
par(new=T)
W = to_World(res$u)
vec_plot(W,xlim = c(-1,3), ylim = c(-1,3), col=3)
x0 = target[3,]
x0 = target[1,]
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
#plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
par(new=T)
W = to_World(res$u)
vec_plot(W,xlim = c(-1,3), ylim = c(-1,3), col=3)
library(pracma)
jacobian(myfun, c(1,1))
jacobian(myfun, c(1,-0.5))
R0
sqrt(1.45)
source("ilqg.R")
R0
R = R0
xo = create_trajectory(3)
R = makeR(a+0.01,b)
x = create_trajectory(1)
R = makeR(a+0.01,b)
x = create_trajectory(3)
ga = (sum((x - xo)^2) - J)
R
R0
R0
R
a
a0
b0
a = 1
b = -1
R = makeR(a,b)
xo
x = create_trajectory(1)
x = create_trajectory(3)
J = sum((x - xo)^2)
J
R = makeR(a+0.01,b)
x = create_trajectory(1)
R = makeR(a+0.01,b)
x = create_trajectory(3)
ga = (sum((x - xo)^2) - J)
ga
R
R[1,1] = 1
jacobian(myfun,c(1,-1))
x0
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
#plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
par(new=T)
W = to_World(res$u)
vec_plot(W,xlim = c(-1,3), ylim = c(-1,3), col=2)
plot(xo[1:100,], type='l')
plot(xo[1:100,], type='l', asp =1)
R0
optim(c(1,-1),myfun, control = list(maxit=5),method = "BFGS")
op = optim(c(1,-1),myfun, control = list(maxit=5),method = "BFGS")
op
R
R0
R0
source("ilqg.R")
makeR = function(a,b){
R = diag(2)
R[1,1] = a; R[2,1] = R[1,2] = b/2;
R
}
create_trajectory = function(n,progress= T){
if(progress){
pb <- txtProgressBar(min = 0, max = n, style = 3)
}
x = array(0,c(n*N,2))
for(i in 1:n){
x0 = target[i,]
res = ilqg(x0, N, maxIter = 100, eps=1e-4, noise = T, logg = F, mode = "control", rand = F)
#x1[[i]] = t(res$x)
x[(N*i-N+1):(N*i),] = t(res$x) #
if(progress){
setTxtProgressBar(pb, i)
}
}
x
}
r = runif(10,1.5,4)
th = runif(10,40,140)*pi/180
target = matrix(c(r*cos(th),r*sin(th)), ncol=2)
plot(target, pch=19)
plot(target, pch=19, asp=1)
par(asp=1)
plot(target, pch=19, asp=1, xlim =c(-2,2))
r = runif(10,1.5,4)
th = runif(10,40,140)*pi/180
target = matrix(c(r*cos(th),r*sin(th)), ncol=2)
plot(target, pch=19, asp=1, xlim =c(-2,2))
r = runif(10,1.5,4)
th = runif(10,40,140)*pi/180
target = matrix(c(r*cos(th),r*sin(th)), ncol=2)
plot(target, pch=19, asp=1, xlim =c(-2,2))
plot(target, pch=19, asp=1, xlim =c(-2,2), ylim = c(0,4))
myfun = function(beta){
R <<- makeR(beta[1],beta[2])
x = create_trajectory(3,T)
sum((x - xo)^2)
}
source("ilqg.R")
plot(target, pch=19, asp=1, xlim =c(-2,2), ylim = c(0,4))
x0 = target[1,]
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
R
W = to_World(res$u)
vec_plot(W,xlim = c(-1,3), ylim = c(-1,3), col=2)
R[1,2]=R[2,1] = -0.8
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
points(target)
points(target, pch=19)
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
par(new=T)
W = to_World(res$u)
vec_plot(W,xlim = c(-1,3), ylim = c(-1,3), col=3)
R
R  = diag(2)
R[1,1] = 10
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
#plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
par(new=T)
W = to_World(res$u)
vec_plot(W,xlim = c(-1,3), ylim = c(-1,3), col=3)
x0
x0 = c(2,2)
source("ilqg.R")
R
x0
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
u
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
jacobian(g, x0 = u_[,k], x = x_[,k])
jacobian(g, x0 = c(0,0), x = c(0,0))
jacobian(g, x0 = c(0,0), x = c(0,0,0))
nx
g
g(c(0,0,0), c(1,1))
source("ilqg.R")
jacobian(g,x0 = c(1,1,1), u = c(1,1) )
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
res$x
x0
source("ilqg.R")
source("ilqg.R")
xt
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
plot(t(res$x), col=2, type='l', xlim = c(-1,3), ylim = c(-1,3), asp=1, xlab = NA, ylab = NA); grid()
W = to_World(res$u)
str(W)
W$x
W$heading
res$x
source("ilqg.R")
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-1,3), ylim = c(-1,3), col=3)
dt = 1
N = 20
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-1,3), ylim = c(-1,3), col=3)
#x0 = c(2,2)
dt = 1
N = 10
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-1,3), ylim = c(-1,3), col=3)
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
source("ilqg.R")
x0
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-1,3), ylim = c(-1,3), col=3)
source("ilqg.R")
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-1,3), ylim = c(-1,3), col=3)
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-1,3), ylim = c(-1,3), col=3)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-1,3), ylim = c(-1,3), col=3)
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-1,3), ylim = c(-1,3), col=3)
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-1,3), ylim = c(-1,3), col=3)
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-1,3), ylim = c(-1,3), col=3)
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-1,3), ylim = c(-1,3), col=3)
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-1,3), ylim = c(-1,3), col=3)
res$x
res$x[,1]
g(res$x[,1], res$u[,1]
)
dim(g(res$x[,1], res$u[,1]))
size(g(res$x[,1], res$u[,1]))
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
ny
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-1,3), ylim = c(-1,3), col=3)
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-1,3), ylim = c(-1,3), col=3)
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-1,3), ylim = c(-1,3), col=3)
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-1,3), ylim = c(-1,3), col=3)
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-1,3), ylim = c(-1,3), col=3)
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-1,3), ylim = c(-1,3), col=3)
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-1,3), ylim = c(-1,3), col=3)
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-1,3), ylim = c(-1,3), col=3)
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
1*pi/180
3*pi/180
1*pi/3/180
0.0174/3
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-1,3), ylim = c(-1,3), col=3)
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
source("ilqg.R")
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-1,3), ylim = c(-1,3), col=3)
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-1,3), ylim = c(-1,3), col=3)
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
res = ilqg(x0, N, maxIter = 100, eps=1e-6, noise = T, logg = T, mode = "control", rand = F)
vec_plot(res$x[1:2,], res$x[3,],xlim = c(-1,3), ylim = c(-1,3), col=3)
